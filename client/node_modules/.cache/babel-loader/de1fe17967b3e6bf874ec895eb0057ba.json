{"remainingRequest":"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/node_modules/babel-loader/lib/index.js!/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/src/store.js","dependencies":[{"path":"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/src/store.js","mtime":1543505441000},{"path":"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/node_modules/cache-loader/dist/cjs.js","mtime":1648227723569},{"path":"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\nimport _toConsumableArray from \"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/node_modules/@babel/runtime/helpers/builtin/es6/toConsumableArray\";\nimport _objectSpread from \"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\nimport { defaultClient as apolloClient } from \"./main\";\nimport { GET_POSTS, SIGNIN_USER, GET_CURRENT_USER, SIGNUP_USER, ADD_POST, SEARCH_POSTS, GET_USER_POSTS, UPDATE_USER_POST, DELETE_USER_POST, INFINITE_SCROLL_POSTS } from \"./queries\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    posts: [],\n    searchResults: [],\n    userPosts: [],\n    user: null,\n    loading: false,\n    error: null,\n    authError: null\n  },\n  mutations: {\n    setPosts: function setPosts(state, payload) {\n      // actualiza el valor de posts\n      state.posts = payload;\n    },\n    setSearchResults: function setSearchResults(state, payload) {\n      if (payload !== null) {\n        state.searchResults = payload;\n      }\n    },\n    clearSearchResults: function clearSearchResults(state) {\n      state.searchResults = [];\n    },\n    setUser: function setUser(state, payload) {\n      state.user = payload;\n    },\n    setUserPosts: function setUserPosts(state, payload) {\n      state.userPosts = payload;\n    },\n    setLoading: function setLoading(state, payload) {\n      state.loading = payload;\n    },\n    clearUser: function clearUser(state) {\n      state.user = null;\n    },\n    setError: function setError(state, payload) {\n      state.error = payload;\n    },\n    clearError: function clearError(state) {\n      state.error = null;\n    },\n    setAuthError: function setAuthError(state, payload) {\n      state.authError = payload;\n    }\n  },\n  actions: {\n    getUserPosts: function getUserPosts(_ref, payload) {\n      var commit = _ref.commit;\n      apolloClient.query({\n        query: GET_USER_POSTS,\n        variables: payload\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n        commit(\"setUserPosts\", data.getUserPosts);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    getCurrentUser: function getCurrentUser(_ref3) {\n      var commit = _ref3.commit;\n      commit(\"setLoading\", true);\n      apolloClient.query({\n        query: GET_CURRENT_USER\n      }).then(function (_ref4) {\n        var data = _ref4.data;\n        commit(\"setLoading\", false); // Agregar la data(estado) a 'user'\n\n        commit(\"setUser\", data.getCurrentUser);\n      }).catch(function (error) {\n        commit(\"setLoading\", false);\n        console.log(error);\n      });\n    },\n    getPosts: function getPosts(_ref5) {\n      var commit = _ref5.commit;\n      commit(\"setLoading\", true); // Usando el cliente Apollo para ejecutar el query getPost\n\n      apolloClient.query({\n        query: GET_POSTS\n      }).then(function (_ref6) {\n        var data = _ref6.data;\n        // actualizar el estado. Obtiene la data en 'actions' y la pasa a 'state' a traves de mutaciones\n        // Commit pasa la data a la mutacion\n        commit(\"setPosts\", data.getPosts);\n        commit(\"setLoading\", false);\n      }).catch(function (error) {\n        commit(\"setLoading\", false);\n        console.log(error);\n      });\n    },\n    addPost: function addPost(_ref7, payload) {\n      var commit = _ref7.commit;\n      apolloClient.mutate({\n        mutation: ADD_POST,\n        variables: payload,\n        update: function update(cache, _ref8) {\n          var addPost = _ref8.data.addPost;\n          // Leer el query de donde se obtienen los datos a actualizar\n          var data = cache.readQuery({\n            query: GET_POSTS\n          }); // Actualizar la data\n          // console.log(data);\n\n          data.getPosts.unshift(addPost);\n          cache.writeQuery({\n            query: GET_POSTS,\n            data: data\n          });\n        },\n        // Asegura que la data sea agregada inmediatamente como se especifica en la función de 'update'\n        optimisticResponse: {\n          __typename: \"Mutation\",\n          addPost: _objectSpread({\n            __typename: \"Post\",\n            _id: -1\n          }, payload)\n        },\n        // ejecutar queries especificados despues de que la mutación se complete\n        refetchQueries: [{\n          query: INFINITE_SCROLL_POSTS,\n          variables: {\n            pageNum: 1,\n            pageSize: 2\n          }\n        }]\n      }).then(function (_ref9) {//console.log(data.addPost);\n\n        var data = _ref9.data;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    updateUserPost: function updateUserPost(_ref10, payload) {\n      var state = _ref10.state,\n          commit = _ref10.commit;\n      apolloClient.mutate({\n        mutation: UPDATE_USER_POST,\n        variables: payload\n      }).then(function (_ref11) {\n        var data = _ref11.data;\n        var index = state.userPosts.findIndex(function (post) {\n          return post._id === data.updateUserPost._id;\n        });\n\n        var userPost = _toConsumableArray(state.userPosts.slice(0, index)).concat([data.updateUserPost], _toConsumableArray(state.userPosts.slice(index + 1)));\n\n        commit(\"setUserPosts\", userPost);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    searchPosts: function searchPosts(_ref12, payload) {\n      var commit = _ref12.commit;\n      apolloClient.query({\n        query: SEARCH_POSTS,\n        variables: payload\n      }).then(function (_ref13) {\n        var data = _ref13.data;\n        commit(\"setSearchResults\", data.searchPosts);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    deleteUserPost: function deleteUserPost(_ref14, payload) {\n      var state = _ref14.state,\n          commit = _ref14.commit;\n      apolloClient.mutate({\n        mutation: DELETE_USER_POST,\n        variables: payload\n      }).then(function (_ref15) {\n        var data = _ref15.data;\n        var index = state.userPosts.findIndex(function (post) {\n          return post._id === data.deleteUserPost._id;\n        });\n\n        var userPosts = _toConsumableArray(state.userPosts.slice(0, index)).concat(_toConsumableArray(state.userPosts.slice(index + 1)));\n\n        commit(\"setUserPosts\", userPosts);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    signinUser: function signinUser(_ref16, payload) {\n      var commit = _ref16.commit;\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient.mutate({\n        mutation: SIGNIN_USER,\n        variables: payload\n      }).then(function (_ref17) {\n        var data = _ref17.data;\n        commit(\"setLoading\", false);\n        localStorage.setItem(\"token\", data.signinUser.token); // Asegurar que el metodo created en main.js se ejecute\n        // router.go -> recarga la pagina\n\n        router.go();\n      }).catch(function (error) {\n        commit(\"setLoading\", false);\n        commit(\"setError\", error);\n        console.log(error);\n      });\n    },\n    signupUser: function signupUser(_ref18, payload) {\n      var commit = _ref18.commit;\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient.mutate({\n        mutation: SIGNUP_USER,\n        variables: payload\n      }).then(function (_ref19) {\n        var data = _ref19.data;\n        commit(\"setLoading\", false);\n        localStorage.setItem(\"token\", data.signupUser.token); // Asegurar que el metodo created en main.js se ejecute\n        // router.go -> recarga la pagina\n\n        router.go();\n      }).catch(function (error) {\n        commit(\"setLoading\", false);\n        commit(\"setError\", error);\n        console.log(error);\n      });\n    },\n    signoutUser: function () {\n      var _signoutUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref20) {\n        var commit;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref20.commit;\n                // limpiar estado de 'user'\n                commit(\"clearUser\"); // Eliminar toke de localStorage\n\n                localStorage.setItem(\"token\", \"\"); // Terminar la sesión\n\n                _context.next = 5;\n                return apolloClient.resetStore();\n\n              case 5:\n                // Redireccionar al home page\n                router.push(\"/\");\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function signoutUser(_x) {\n        return _signoutUser.apply(this, arguments);\n      };\n    }()\n  },\n  getters: {\n    posts: function posts(state) {\n      return state.posts;\n    },\n    searchResults: function searchResults(state) {\n      return state.searchResults;\n    },\n    userPosts: function userPosts(state) {\n      return state.userPosts;\n    },\n    loading: function loading(state) {\n      return state.loading;\n    },\n    user: function user(state) {\n      return state.user;\n    },\n    userFavorites: function userFavorites(state) {\n      return state.user && state.user.favorites;\n    },\n    error: function error(state) {\n      return state.error;\n    },\n    authError: function authError(state) {\n      return state.authError;\n    }\n  }\n});",{"version":3,"sources":["src/store.js"],"names":["Vue","Vuex","router","defaultClient","apolloClient","GET_POSTS","SIGNIN_USER","GET_CURRENT_USER","SIGNUP_USER","ADD_POST","SEARCH_POSTS","GET_USER_POSTS","UPDATE_USER_POST","DELETE_USER_POST","INFINITE_SCROLL_POSTS","use","Store","state","posts","searchResults","userPosts","user","loading","error","authError","mutations","setPosts","payload","setSearchResults","clearSearchResults","setUser","setUserPosts","setLoading","clearUser","setError","clearError","setAuthError","actions","getUserPosts","commit","query","variables","then","data","catch","console","log","getCurrentUser","getPosts","addPost","mutate","mutation","update","cache","readQuery","unshift","writeQuery","optimisticResponse","__typename","_id","refetchQueries","pageNum","pageSize","updateUserPost","index","findIndex","post","userPost","slice","searchPosts","deleteUserPost","signinUser","localStorage","setItem","token","go","signupUser","signoutUser","resetStore","push","getters","userFavorites","favorites"],"mappings":"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","sourceRoot":"/home/sebastian/Escritorio/proyecto-9-vue-social-network-master/client","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\n\nimport { defaultClient as apolloClient } from \"./main\";\nimport {\n  GET_POSTS,\n  SIGNIN_USER,\n  GET_CURRENT_USER,\n  SIGNUP_USER,\n  ADD_POST,\n  SEARCH_POSTS,\n  GET_USER_POSTS,\n  UPDATE_USER_POST,\n  DELETE_USER_POST,\n  INFINITE_SCROLL_POSTS\n} from \"./queries\";\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    posts: [],\n    searchResults: [],\n    userPosts: [],\n    user: null,\n    loading: false,\n    error: null,\n    authError: null\n  },\n  mutations: {\n    setPosts: (state, payload) => {\n      // actualiza el valor de posts\n      state.posts = payload;\n    },\n    setSearchResults: (state, payload) => {\n      if (payload !== null) {\n        state.searchResults = payload;\n      }\n    },\n    clearSearchResults: state => {\n      state.searchResults = [];\n    },\n    setUser: (state, payload) => {\n      state.user = payload;\n    },\n    setUserPosts: (state, payload) => {\n      state.userPosts = payload;\n    },\n    setLoading: (state, payload) => {\n      state.loading = payload;\n    },\n    clearUser: state => {\n      state.user = null;\n    },\n    setError: (state, payload) => {\n      state.error = payload;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    setAuthError: (state, payload) => {\n      state.authError = payload;\n    }\n  },\n  actions: {\n    getUserPosts: ({ commit }, payload) => {\n      apolloClient\n        .query({\n          query: GET_USER_POSTS,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setUserPosts\", data.getUserPosts);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    getCurrentUser: ({ commit }) => {\n      commit(\"setLoading\", true);\n      apolloClient\n        .query({\n          query: GET_CURRENT_USER\n        })\n        .then(({ data }) => {\n          commit(\"setLoading\", false);\n          // Agregar la data(estado) a 'user'\n          commit(\"setUser\", data.getCurrentUser);\n        })\n        .catch(error => {\n          commit(\"setLoading\", false);\n          console.log(error);\n        });\n    },\n    getPosts: ({ commit }) => {\n      commit(\"setLoading\", true);\n      // Usando el cliente Apollo para ejecutar el query getPost\n      apolloClient\n        .query({\n          query: GET_POSTS\n        })\n        .then(({ data }) => {\n          // actualizar el estado. Obtiene la data en 'actions' y la pasa a 'state' a traves de mutaciones\n          // Commit pasa la data a la mutacion\n          commit(\"setPosts\", data.getPosts);\n          commit(\"setLoading\", false);\n        })\n        .catch(error => {\n          commit(\"setLoading\", false);\n          console.log(error);\n        });\n    },\n    addPost: ({ commit }, payload) => {\n      apolloClient\n        .mutate({\n          mutation: ADD_POST,\n          variables: payload,\n          update: (cache, { data: { addPost } }) => {\n            // Leer el query de donde se obtienen los datos a actualizar\n            const data = cache.readQuery({ query: GET_POSTS });\n            // Actualizar la data\n            // console.log(data);\n            data.getPosts.unshift(addPost);\n            cache.writeQuery({ query: GET_POSTS, data });\n          },\n          // Asegura que la data sea agregada inmediatamente como se especifica en la función de 'update'\n          optimisticResponse: {\n            __typename: \"Mutation\",\n            addPost: {\n              __typename: \"Post\",\n              _id: -1,\n              ...payload\n            }\n          },\n          // ejecutar queries especificados despues de que la mutación se complete\n          refetchQueries: [\n            {\n              query: INFINITE_SCROLL_POSTS,\n              variables: {\n                pageNum: 1,\n                pageSize: 2\n              }\n            }\n          ]\n        })\n        .then(({ data }) => {\n          //console.log(data.addPost);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    updateUserPost: ({ state, commit }, payload) => {\n      apolloClient\n        .mutate({\n          mutation: UPDATE_USER_POST,\n          variables: payload\n        })\n        .then(({ data }) => {\n          const index = state.userPosts.findIndex(\n            post => post._id === data.updateUserPost._id\n          );\n          const userPost = [\n            ...state.userPosts.slice(0, index),\n            data.updateUserPost,\n            ...state.userPosts.slice(index + 1)\n          ];\n          commit(\"setUserPosts\", userPost);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    searchPosts: ({ commit }, payload) => {\n      apolloClient\n        .query({\n          query: SEARCH_POSTS,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setSearchResults\", data.searchPosts);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    deleteUserPost: ({ state, commit }, payload) => {\n      apolloClient\n        .mutate({\n          mutation: DELETE_USER_POST,\n          variables: payload\n        })\n        .then(({ data }) => {\n          const index = state.userPosts.findIndex(\n            post => post._id === data.deleteUserPost._id\n          );\n          const userPosts = [\n            ...state.userPosts.slice(0, index),\n            ...state.userPosts.slice(index + 1)\n          ];\n          commit(\"setUserPosts\", userPosts);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    signinUser: ({ commit }, payload) => {\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient\n        .mutate({\n          mutation: SIGNIN_USER,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setLoading\", false);\n          localStorage.setItem(\"token\", data.signinUser.token);\n          // Asegurar que el metodo created en main.js se ejecute\n          // router.go -> recarga la pagina\n          router.go();\n        })\n        .catch(error => {\n          commit(\"setLoading\", false);\n          commit(\"setError\", error);\n          console.log(error);\n        });\n    },\n    signupUser: ({ commit }, payload) => {\n      commit(\"clearError\");\n      commit(\"setLoading\", true);\n      apolloClient\n        .mutate({\n          mutation: SIGNUP_USER,\n          variables: payload\n        })\n        .then(({ data }) => {\n          commit(\"setLoading\", false);\n          localStorage.setItem(\"token\", data.signupUser.token);\n          // Asegurar que el metodo created en main.js se ejecute\n          // router.go -> recarga la pagina\n          router.go();\n        })\n        .catch(error => {\n          commit(\"setLoading\", false);\n          commit(\"setError\", error);\n          console.log(error);\n        });\n    },\n    signoutUser: async ({ commit }) => {\n      // limpiar estado de 'user'\n      commit(\"clearUser\");\n      // Eliminar toke de localStorage\n      localStorage.setItem(\"token\", \"\");\n      // Terminar la sesión\n      await apolloClient.resetStore();\n      // Redireccionar al home page\n      router.push(\"/\");\n    }\n  },\n  getters: {\n    posts: state => state.posts,\n    searchResults: state => state.searchResults,\n    userPosts: state => state.userPosts,\n    loading: state => state.loading,\n    user: state => state.user,\n    userFavorites: state => state.user && state.user.favorites,\n    error: state => state.error,\n    authError: state => state.authError\n  }\n});\n"]}]}