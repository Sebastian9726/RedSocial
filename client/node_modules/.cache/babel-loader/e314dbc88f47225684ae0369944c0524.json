{"remainingRequest":"/home/sebastian/Escritorio/RedSocial/client/node_modules/babel-loader/lib/index.js!/home/sebastian/Escritorio/RedSocial/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sebastian/Escritorio/RedSocial/client/src/components/Post/Post.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/sebastian/Escritorio/RedSocial/client/src/components/Post/Post.vue","mtime":1648485675506},{"path":"/home/sebastian/Escritorio/RedSocial/client/node_modules/cache-loader/dist/cjs.js","mtime":1648485674774},{"path":"/home/sebastian/Escritorio/RedSocial/client/node_modules/babel-loader/lib/index.js","mtime":1648485674754},{"path":"/home/sebastian/Escritorio/RedSocial/client/node_modules/vue-loader/lib/index.js","mtime":1648485675418}],"contextDependencies":[],"result":["import _objectSpread from \"/home/sebastian/Escritorio/RedSocial/client/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport { GET_POST, ADD_POST_MESSAGE, LIKE_POST, UNLIKE_POST } from \"../../queries\";\nexport default {\n  name: \"Post\",\n  //Obtener el id de la publicacion desde la ruta\n  props: [\"postId\"],\n  data: function data() {\n    return {\n      dialog: false,\n      messageBody: \"\",\n      postLiked: false,\n      isFormValid: true,\n      messageRules: [function (message) {\n        return !!message || \"Campo requerido\";\n      }, function (message) {\n        return message.length < 100 || \"El comentario debe tener menos de 100 caracteres\";\n      }]\n    };\n  },\n  computed: _objectSpread({}, mapGetters([\"user\", \"userFavorites\"])),\n  methods: {\n    checkIfPostLiked: function checkIfPostLiked(postId) {\n      // Comprobar si el postId se encuentra en el arreglo de favoritos del usuario\n      if (this.userFavorites && this.userFavorites.some(function (fave) {\n        return fave._id === postId;\n      })) {\n        this.postLiked = true;\n        return true;\n      } else {\n        this.postLiked = false;\n        return false;\n      }\n    },\n    handleToggleLike: function handleToggleLike() {\n      if (this.postLiked) {\n        this.handleUnlikePost();\n      } else {\n        this.handleLikePost();\n      }\n    },\n    handleLikePost: function handleLikePost() {\n      var _this = this;\n\n      var variables = {\n        postId: this.postId,\n        username: this.user.username\n      };\n      this.$apollo.mutate({\n        mutation: LIKE_POST,\n        variables: variables,\n        update: function update(cache, _ref) {\n          var likePost = _ref.data.likePost;\n          var data = cache.readQuery({\n            query: GET_POST,\n            variables: {\n              postId: _this.postId\n            }\n          });\n          data.getPost.likes += 1;\n          cache.writeQuery({\n            query: GET_POST,\n            variables: {\n              postId: _this.postId\n            },\n            data: data\n          });\n        }\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n\n        // Agregar favoritos al usuario\n        var updatedUser = _objectSpread({}, _this.user, {\n          favorites: data.likePost.favorites\n        });\n\n        _this.$store.commit(\"setUser\", updatedUser);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    handleUnlikePost: function handleUnlikePost() {\n      var _this2 = this;\n\n      var variables = {\n        postId: this.postId,\n        username: this.user.username\n      };\n      this.$apollo.mutate({\n        mutation: UNLIKE_POST,\n        variables: variables,\n        update: function update(cache, _ref3) {\n          var unlikePost = _ref3.data.unlikePost;\n          var data = cache.readQuery({\n            query: GET_POST,\n            variables: {\n              postId: _this2.postId\n            }\n          });\n          data.getPost.likes -= 1;\n          cache.writeQuery({\n            query: GET_POST,\n            variables: {\n              postId: _this2.postId\n            },\n            data: data\n          });\n        }\n      }).then(function (_ref4) {\n        var data = _ref4.data;\n\n        var updatedUser = _objectSpread({}, _this2.user, {\n          favorites: data.unlikePost.favorites\n        });\n\n        _this2.$store.commit(\"setUser\", updatedUser);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    handleAddPostMessage: function handleAddPostMessage() {\n      var _this3 = this;\n\n      if (this.$refs.form.validate()) {\n        var variables = {\n          messageBody: this.messageBody,\n          userId: this.user._id,\n          postId: this.postId\n        };\n        this.$apollo.mutate({\n          mutation: ADD_POST_MESSAGE,\n          variables: variables,\n          update: function update(cache, _ref5) {\n            var addPostMessage = _ref5.data.addPostMessage;\n            var data = cache.readQuery({\n              query: GET_POST,\n              variables: {\n                postId: _this3.postId\n              }\n            });\n            data.getPost.messages.unshift(addPostMessage);\n            cache.writeQuery({\n              query: GET_POST,\n              variables: {\n                postId: _this3.postId\n              },\n              data: data\n            });\n          }\n        }).then(function (_ref6) {\n          var data = _ref6.data;\n\n          // limpiar el input del comentario\n          _this3.$refs.form.reset();\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }\n    },\n    goToPreviousPage: function goToPreviousPage() {\n      this.$router.go(-1);\n    },\n    toggleImageDialog: function toggleImageDialog() {\n      if (window.innerWidth > 500) {\n        this.dialog = !this.dialog;\n      }\n    },\n    checkIfOwnMessage: function checkIfOwnMessage(message) {\n      // Comprobar que el id del usuario activo sea igual al del usuario que creo el comentario\n      return this.user && this.user._id === message.messageUser._id;\n    }\n  }\n};",{"version":3,"sources":["Post.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-container v-if=\"getPost\" class=\"mt-3\" flexbox center fluid>\n    <v-layout row wrap>\n      <v-flex xs12 sm10 offset-sm1>\n        <v-card hover>\n          <v-tooltip right>\n            <v-icon dark>zoom_out_map</v-icon>\n            <v-card-media @click=\"toggleImageDialog\" slot=\"activator\" :src=\"getPost.imageUrl\" id=\"post__image\"></v-card-media>\n          </v-tooltip>\n          <v-card-title>\n            <h1>{{getPost.title}}</h1>\n            <v-icon large :color=\"checkIfPostLiked(getPost._id) ? 'secondary' : 'grey'\" class=\"ml-3\" @click=\"handleToggleLike\">thumb_up</v-icon>\n            <h2 class=\"mx-2 font-weight-medium grey--text\">{{getPost.likes}}</h2>\n            <v-spacer></v-spacer>\n            <v-icon @click=\"goToPreviousPage\" color=\"grey\" large>arrow_back</v-icon>\n          </v-card-title>\n          <v-dialog v-model=\"dialog\">\n            <v-card>\n              <v-card-media :src=\"getPost.imageUrl\" height=\"80vh\"></v-card-media>\n            </v-card>\n          </v-dialog>\n\n          <v-card-text>\n            <span v-for=\"(category, index) in getPost.categories\" :key=\"index\">\n              <v-chip class=\"mb-3\" color=\"accent\" text-color=\"white\">\n                <v-icon left small>loyalty</v-icon>{{category}}\n              </v-chip>\n            </span>\n            <h3 class=\"font-weight-medium\">{{getPost.description}}</h3>\n          </v-card-text>\n        </v-card>\n      </v-flex>\n    </v-layout>\n    <!-- Comentarios -->\n    <div class=\"mt-3\">\n      <v-layout class=\"mb-3\" v-if=\"user\">\n        <v-flex xs12 sm8 offset-sm1>\n          <v-form v-model=\"isFormValid\" lazy-validation ref=\"form\" @submit.prevent=\"handleAddPostMessage\">\n            <v-layout row>\n              <v-flex xs12>\n                <v-text-field :rules=\"messageRules\" v-model=\"messageBody\" clearable :append-outer-icon=\"messageBody && 'send'\" label=\"Comentar\" type=\"text\" @click:append-outer=\"handleAddPostMessage\" prepend-icon=\"rate_review\" required></v-text-field>\n              </v-flex>\n            </v-layout>\n          </v-form>\n        </v-flex>\n      </v-layout>\n      <v-layout row wrap>\n        <v-flex xs12 sm8 offset-sm1>\n          <v-list subheader two-line>\n            <v-subheader>Comentarios ({{getPost.messages.length}})</v-subheader>\n\n            <template v-for=\"message in getPost.messages\">\n              <v-divider key:key=\"message._id\"></v-divider>\n\n              <v-list-tile avatar inset :key=\"message.title\">\n                <v-list-tile-avatar>\n                  <img :src=\"message.messageUser.avatar\">\n                </v-list-tile-avatar>\n\n                <v-list-tile-content>\n                  <v-list-tile-title>\n                    {{message.messageBody}}\n                  </v-list-tile-title>\n                  <v-list-tile-sub-title>\n                    {{message.messageUser.username}}\n                    <span class=\"grey--text text--lighten-1 hidden-xs-only\">{{message.messageDate}}</span>\n                  </v-list-tile-sub-title>\n                </v-list-tile-content>\n\n                <v-list-tile-action class='hidden-xs-only'>\n                  <!-- El color del icono es diferente si es un comentario del usuario activo -->\n                  <v-icon :color=\"checkIfOwnMessage(message) ? 'accent' : 'grey'\">textsms</v-icon>\n                </v-list-tile-action>\n\n              </v-list-tile>\n            </template>\n          </v-list>\n        </v-flex>\n      </v-layout>\n\n    </div>\n\n  </v-container>\n</template>\n\n<script>\nimport { mapGetters } from \"vuex\";\nimport {\n  GET_POST,\n  ADD_POST_MESSAGE,\n  LIKE_POST,\n  UNLIKE_POST\n} from \"../../queries\";\n\nexport default {\n  name: \"Post\",\n  //Obtener el id de la publicacion desde la ruta\n  props: [\"postId\"],\n  data() {\n    return {\n      dialog: false,\n      messageBody: \"\",\n      postLiked: false,\n      isFormValid: true,\n      messageRules: [\n        message => !!message || \"Campo requerido\",\n        message =>\n          message.length < 100 ||\n          \"El comentario debe tener menos de 100 caracteres\"\n      ]\n    };\n  },\n  computed: {\n    ...mapGetters([\"user\", \"userFavorites\"])\n  },\n  methods: {\n    checkIfPostLiked(postId) {\n      // Comprobar si el postId se encuentra en el arreglo de favoritos del usuario\n      if (\n        this.userFavorites &&\n        this.userFavorites.some(fave => fave._id === postId)\n      ) {\n        this.postLiked = true;\n        return true;\n      } else {\n        this.postLiked = false;\n        return false;\n      }\n    },\n    handleToggleLike() {\n      if (this.postLiked) {\n        this.handleUnlikePost();\n      } else {\n        this.handleLikePost();\n      }\n    },\n    handleLikePost() {\n      const variables = {\n        postId: this.postId,\n        username: this.user.username\n      };\n      this.$apollo\n        .mutate({\n          mutation: LIKE_POST,\n          variables,\n          update: (cache, { data: { likePost } }) => {\n            const data = cache.readQuery({\n              query: GET_POST,\n              variables: { postId: this.postId }\n            });\n            data.getPost.likes += 1;\n            cache.writeQuery({\n              query: GET_POST,\n              variables: { postId: this.postId },\n              data\n            });\n          }\n        })\n        .then(({ data }) => {\n          // Agregar favoritos al usuario\n          const updatedUser = {\n            ...this.user,\n            favorites: data.likePost.favorites\n          };\n          this.$store.commit(\"setUser\", updatedUser);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    handleUnlikePost() {\n      const variables = {\n        postId: this.postId,\n        username: this.user.username\n      };\n      this.$apollo\n        .mutate({\n          mutation: UNLIKE_POST,\n          variables,\n          update: (cache, { data: { unlikePost } }) => {\n            const data = cache.readQuery({\n              query: GET_POST,\n              variables: { postId: this.postId }\n            });\n            data.getPost.likes -= 1;\n            cache.writeQuery({\n              query: GET_POST,\n              variables: { postId: this.postId },\n              data\n            });\n          }\n        })\n        .then(({ data }) => {\n          const updatedUser = {\n            ...this.user,\n            favorites: data.unlikePost.favorites\n          };\n          this.$store.commit(\"setUser\", updatedUser);\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    handleAddPostMessage() {\n      if (this.$refs.form.validate()) {\n        const variables = {\n          messageBody: this.messageBody,\n          userId: this.user._id,\n          postId: this.postId\n        };\n        this.$apollo\n          .mutate({\n            mutation: ADD_POST_MESSAGE,\n            variables,\n            update: (cache, { data: { addPostMessage } }) => {\n              const data = cache.readQuery({\n                query: GET_POST,\n                variables: { postId: this.postId }\n              });\n              data.getPost.messages.unshift(addPostMessage);\n              cache.writeQuery({\n                query: GET_POST,\n                variables: { postId: this.postId },\n                data\n              });\n            }\n          })\n          .then(({ data }) => {\n            // limpiar el input del comentario\n            this.$refs.form.reset();\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      }\n    },\n    goToPreviousPage() {\n      this.$router.go(-1);\n    },\n    toggleImageDialog() {\n      if (window.innerWidth > 500) {\n        this.dialog = !this.dialog;\n      }\n    },\n    checkIfOwnMessage(message) {\n      // Comprobar que el id del usuario activo sea igual al del usuario que creo el comentario\n      return this.user && this.user._id === message.messageUser._id;\n    }\n  }\n};\n</script>\n\n<style scoped>\n#post__image {\n  height: 400px !important;\n}\n</style>\n"],"sourceRoot":"src/components/Post"}]}